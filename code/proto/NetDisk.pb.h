// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetDisk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetDisk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetDisk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetDisk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetDisk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetDisk_2eproto;
namespace example {
class NetDiskRequest;
class NetDiskRequestDefaultTypeInternal;
extern NetDiskRequestDefaultTypeInternal _NetDiskRequest_default_instance_;
class NetDiskResponse;
class NetDiskResponseDefaultTypeInternal;
extern NetDiskResponseDefaultTypeInternal _NetDiskResponse_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::NetDiskRequest* Arena::CreateMaybeMessage<::example::NetDiskRequest>(Arena*);
template<> ::example::NetDiskResponse* Arena::CreateMaybeMessage<::example::NetDiskResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

// ===================================================================

class NetDiskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.NetDiskRequest) */ {
 public:
  inline NetDiskRequest() : NetDiskRequest(nullptr) {};
  virtual ~NetDiskRequest();

  NetDiskRequest(const NetDiskRequest& from);
  NetDiskRequest(NetDiskRequest&& from) noexcept
    : NetDiskRequest() {
    *this = ::std::move(from);
  }

  inline NetDiskRequest& operator=(const NetDiskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetDiskRequest& operator=(NetDiskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetDiskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetDiskRequest* internal_default_instance() {
    return reinterpret_cast<const NetDiskRequest*>(
               &_NetDiskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetDiskRequest& a, NetDiskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetDiskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetDiskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetDiskRequest* New() const final {
    return CreateMaybeMessage<NetDiskRequest>(nullptr);
  }

  NetDiskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetDiskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetDiskRequest& from);
  void MergeFrom(const NetDiskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetDiskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.NetDiskRequest";
  }
  protected:
  explicit NetDiskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDisk_2eproto);
    return ::descriptor_table_NetDisk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartSignFieldNumber = 4,
    kFileNameFieldNumber = 5,
    kFileSignFieldNumber = 6,
    kUsrFieldNumber = 7,
    kBodyFieldNumber = 8,
    kOpTypeFieldNumber = 1,
    kShardFieldNumber = 2,
    kPartIndexFieldNumber = 3,
  };
  // required string part_sign = 4;
  bool has_part_sign() const;
  private:
  bool _internal_has_part_sign() const;
  public:
  void clear_part_sign();
  const std::string& part_sign() const;
  void set_part_sign(const std::string& value);
  void set_part_sign(std::string&& value);
  void set_part_sign(const char* value);
  void set_part_sign(const char* value, size_t size);
  std::string* mutable_part_sign();
  std::string* release_part_sign();
  void set_allocated_part_sign(std::string* part_sign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_part_sign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_part_sign(
      std::string* part_sign);
  private:
  const std::string& _internal_part_sign() const;
  void _internal_set_part_sign(const std::string& value);
  std::string* _internal_mutable_part_sign();
  public:

  // required bytes file_name = 5;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const void* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_name(
      std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required string file_sign = 6;
  bool has_file_sign() const;
  private:
  bool _internal_has_file_sign() const;
  public:
  void clear_file_sign();
  const std::string& file_sign() const;
  void set_file_sign(const std::string& value);
  void set_file_sign(std::string&& value);
  void set_file_sign(const char* value);
  void set_file_sign(const char* value, size_t size);
  std::string* mutable_file_sign();
  std::string* release_file_sign();
  void set_allocated_file_sign(std::string* file_sign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_sign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_sign(
      std::string* file_sign);
  private:
  const std::string& _internal_file_sign() const;
  void _internal_set_file_sign(const std::string& value);
  std::string* _internal_mutable_file_sign();
  public:

  // required string usr = 7;
  bool has_usr() const;
  private:
  bool _internal_has_usr() const;
  public:
  void clear_usr();
  const std::string& usr() const;
  void set_usr(const std::string& value);
  void set_usr(std::string&& value);
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  std::string* mutable_usr();
  std::string* release_usr();
  void set_allocated_usr(std::string* usr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_usr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_usr(
      std::string* usr);
  private:
  const std::string& _internal_usr() const;
  void _internal_set_usr(const std::string& value);
  std::string* _internal_mutable_usr();
  public:

  // required bytes body = 8;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // required uint32 op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 op_type() const;
  void set_op_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_op_type() const;
  void _internal_set_op_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shard = 2;
  bool has_shard() const;
  private:
  bool _internal_has_shard() const;
  public:
  void clear_shard();
  ::PROTOBUF_NAMESPACE_ID::uint32 shard() const;
  void set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shard() const;
  void _internal_set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 part_index = 3;
  bool has_part_index() const;
  private:
  bool _internal_has_part_index() const;
  public:
  void clear_part_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 part_index() const;
  void set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_part_index() const;
  void _internal_set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.NetDiskRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 op_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_;
  ::PROTOBUF_NAMESPACE_ID::uint32 part_index_;
  friend struct ::TableStruct_NetDisk_2eproto;
};
// -------------------------------------------------------------------

class NetDiskResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.NetDiskResponse) */ {
 public:
  inline NetDiskResponse() : NetDiskResponse(nullptr) {};
  virtual ~NetDiskResponse();

  NetDiskResponse(const NetDiskResponse& from);
  NetDiskResponse(NetDiskResponse&& from) noexcept
    : NetDiskResponse() {
    *this = ::std::move(from);
  }

  inline NetDiskResponse& operator=(const NetDiskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetDiskResponse& operator=(NetDiskResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetDiskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetDiskResponse* internal_default_instance() {
    return reinterpret_cast<const NetDiskResponse*>(
               &_NetDiskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetDiskResponse& a, NetDiskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetDiskResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetDiskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetDiskResponse* New() const final {
    return CreateMaybeMessage<NetDiskResponse>(nullptr);
  }

  NetDiskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetDiskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetDiskResponse& from);
  void MergeFrom(const NetDiskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetDiskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.NetDiskResponse";
  }
  protected:
  explicit NetDiskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NetDisk_2eproto);
    return ::descriptor_table_NetDisk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 4,
    kBodyFieldNumber = 6,
    kResFieldNumber = 1,
    kShardFieldNumber = 2,
    kPartIndexFieldNumber = 3,
  };
  // required string file_name = 4;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_name(
      std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required string body = 6;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // required bool res = 1;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  bool res() const;
  void set_res(bool value);
  private:
  bool _internal_res() const;
  void _internal_set_res(bool value);
  public:

  // required uint32 shard = 2;
  bool has_shard() const;
  private:
  bool _internal_has_shard() const;
  public:
  void clear_shard();
  ::PROTOBUF_NAMESPACE_ID::uint32 shard() const;
  void set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shard() const;
  void _internal_set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 part_index = 3;
  bool has_part_index() const;
  private:
  bool _internal_has_part_index() const;
  public:
  void clear_part_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 part_index() const;
  void set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_part_index() const;
  void _internal_set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.NetDiskResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  bool res_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_;
  ::PROTOBUF_NAMESPACE_ID::uint32 part_index_;
  friend struct ::TableStruct_NetDisk_2eproto;
};
// ===================================================================

class NetDiskService_Stub;

class NetDiskService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline NetDiskService() {};
 public:
  virtual ~NetDiskService();

  typedef NetDiskService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Send(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::NetDiskRequest* request,
                       ::example::NetDiskResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NetDiskService);
};

class NetDiskService_Stub : public NetDiskService {
 public:
  NetDiskService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  NetDiskService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~NetDiskService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements NetDiskService ------------------------------------------

  void Send(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::NetDiskRequest* request,
                       ::example::NetDiskResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NetDiskService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetDiskRequest

// required uint32 op_type = 1;
inline bool NetDiskRequest::_internal_has_op_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetDiskRequest::has_op_type() const {
  return _internal_has_op_type();
}
inline void NetDiskRequest::clear_op_type() {
  op_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::_internal_op_type() const {
  return op_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::op_type() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.op_type)
  return _internal_op_type();
}
inline void NetDiskRequest::_internal_set_op_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  op_type_ = value;
}
inline void NetDiskRequest::set_op_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.op_type)
}

// required uint32 shard = 2;
inline bool NetDiskRequest::_internal_has_shard() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetDiskRequest::has_shard() const {
  return _internal_has_shard();
}
inline void NetDiskRequest::clear_shard() {
  shard_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::_internal_shard() const {
  return shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::shard() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.shard)
  return _internal_shard();
}
inline void NetDiskRequest::_internal_set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  shard_ = value;
}
inline void NetDiskRequest::set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shard(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.shard)
}

// required uint32 part_index = 3;
inline bool NetDiskRequest::_internal_has_part_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NetDiskRequest::has_part_index() const {
  return _internal_has_part_index();
}
inline void NetDiskRequest::clear_part_index() {
  part_index_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::_internal_part_index() const {
  return part_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskRequest::part_index() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.part_index)
  return _internal_part_index();
}
inline void NetDiskRequest::_internal_set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  part_index_ = value;
}
inline void NetDiskRequest::set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_part_index(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.part_index)
}

// required string part_sign = 4;
inline bool NetDiskRequest::_internal_has_part_sign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetDiskRequest::has_part_sign() const {
  return _internal_has_part_sign();
}
inline void NetDiskRequest::clear_part_sign() {
  part_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetDiskRequest::part_sign() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.part_sign)
  return _internal_part_sign();
}
inline void NetDiskRequest::set_part_sign(const std::string& value) {
  _internal_set_part_sign(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.part_sign)
}
inline std::string* NetDiskRequest::mutable_part_sign() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskRequest.part_sign)
  return _internal_mutable_part_sign();
}
inline const std::string& NetDiskRequest::_internal_part_sign() const {
  return part_sign_.Get();
}
inline void NetDiskRequest::_internal_set_part_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  part_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskRequest::set_part_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  part_sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskRequest.part_sign)
}
inline void NetDiskRequest::set_part_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  part_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskRequest.part_sign)
}
inline void NetDiskRequest::set_part_sign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  part_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskRequest.part_sign)
}
inline std::string* NetDiskRequest::_internal_mutable_part_sign() {
  _has_bits_[0] |= 0x00000001u;
  return part_sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskRequest::release_part_sign() {
  // @@protoc_insertion_point(field_release:example.NetDiskRequest.part_sign)
  if (!_internal_has_part_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return part_sign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskRequest::set_allocated_part_sign(std::string* part_sign) {
  if (part_sign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  part_sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), part_sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskRequest.part_sign)
}
inline std::string* NetDiskRequest::unsafe_arena_release_part_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskRequest.part_sign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return part_sign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskRequest::unsafe_arena_set_allocated_part_sign(
    std::string* part_sign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (part_sign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  part_sign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      part_sign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskRequest.part_sign)
}

// required bytes file_name = 5;
inline bool NetDiskRequest::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetDiskRequest::has_file_name() const {
  return _internal_has_file_name();
}
inline void NetDiskRequest::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetDiskRequest::file_name() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.file_name)
  return _internal_file_name();
}
inline void NetDiskRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.file_name)
}
inline std::string* NetDiskRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& NetDiskRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void NetDiskRequest::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskRequest::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskRequest.file_name)
}
inline void NetDiskRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskRequest.file_name)
}
inline void NetDiskRequest::set_file_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskRequest.file_name)
}
inline std::string* NetDiskRequest::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000002u;
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:example.NetDiskRequest.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskRequest.file_name)
}
inline std::string* NetDiskRequest::unsafe_arena_release_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskRequest.file_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return file_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskRequest::unsafe_arena_set_allocated_file_name(
    std::string* file_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskRequest.file_name)
}

// required string file_sign = 6;
inline bool NetDiskRequest::_internal_has_file_sign() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetDiskRequest::has_file_sign() const {
  return _internal_has_file_sign();
}
inline void NetDiskRequest::clear_file_sign() {
  file_sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetDiskRequest::file_sign() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.file_sign)
  return _internal_file_sign();
}
inline void NetDiskRequest::set_file_sign(const std::string& value) {
  _internal_set_file_sign(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.file_sign)
}
inline std::string* NetDiskRequest::mutable_file_sign() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskRequest.file_sign)
  return _internal_mutable_file_sign();
}
inline const std::string& NetDiskRequest::_internal_file_sign() const {
  return file_sign_.Get();
}
inline void NetDiskRequest::_internal_set_file_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  file_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskRequest::set_file_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  file_sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskRequest.file_sign)
}
inline void NetDiskRequest::set_file_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  file_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskRequest.file_sign)
}
inline void NetDiskRequest::set_file_sign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  file_sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskRequest.file_sign)
}
inline std::string* NetDiskRequest::_internal_mutable_file_sign() {
  _has_bits_[0] |= 0x00000004u;
  return file_sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskRequest::release_file_sign() {
  // @@protoc_insertion_point(field_release:example.NetDiskRequest.file_sign)
  if (!_internal_has_file_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return file_sign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskRequest::set_allocated_file_sign(std::string* file_sign) {
  if (file_sign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskRequest.file_sign)
}
inline std::string* NetDiskRequest::unsafe_arena_release_file_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskRequest.file_sign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return file_sign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskRequest::unsafe_arena_set_allocated_file_sign(
    std::string* file_sign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_sign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_sign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_sign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskRequest.file_sign)
}

// required string usr = 7;
inline bool NetDiskRequest::_internal_has_usr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetDiskRequest::has_usr() const {
  return _internal_has_usr();
}
inline void NetDiskRequest::clear_usr() {
  usr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetDiskRequest::usr() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.usr)
  return _internal_usr();
}
inline void NetDiskRequest::set_usr(const std::string& value) {
  _internal_set_usr(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.usr)
}
inline std::string* NetDiskRequest::mutable_usr() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskRequest.usr)
  return _internal_mutable_usr();
}
inline const std::string& NetDiskRequest::_internal_usr() const {
  return usr_.Get();
}
inline void NetDiskRequest::_internal_set_usr(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  usr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskRequest::set_usr(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  usr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskRequest.usr)
}
inline void NetDiskRequest::set_usr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  usr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskRequest.usr)
}
inline void NetDiskRequest::set_usr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  usr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskRequest.usr)
}
inline std::string* NetDiskRequest::_internal_mutable_usr() {
  _has_bits_[0] |= 0x00000008u;
  return usr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskRequest::release_usr() {
  // @@protoc_insertion_point(field_release:example.NetDiskRequest.usr)
  if (!_internal_has_usr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return usr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskRequest::set_allocated_usr(std::string* usr) {
  if (usr != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  usr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskRequest.usr)
}
inline std::string* NetDiskRequest::unsafe_arena_release_usr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskRequest.usr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return usr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskRequest::unsafe_arena_set_allocated_usr(
    std::string* usr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (usr != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  usr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      usr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskRequest.usr)
}

// required bytes body = 8;
inline bool NetDiskRequest::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetDiskRequest::has_body() const {
  return _internal_has_body();
}
inline void NetDiskRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetDiskRequest::body() const {
  // @@protoc_insertion_point(field_get:example.NetDiskRequest.body)
  return _internal_body();
}
inline void NetDiskRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:example.NetDiskRequest.body)
}
inline std::string* NetDiskRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskRequest.body)
  return _internal_mutable_body();
}
inline const std::string& NetDiskRequest::_internal_body() const {
  return body_.Get();
}
inline void NetDiskRequest::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskRequest::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskRequest.body)
}
inline void NetDiskRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskRequest.body)
}
inline void NetDiskRequest::set_body(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskRequest.body)
}
inline std::string* NetDiskRequest::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000010u;
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskRequest::release_body() {
  // @@protoc_insertion_point(field_release:example.NetDiskRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskRequest.body)
}
inline std::string* NetDiskRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskRequest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskRequest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskRequest.body)
}

// -------------------------------------------------------------------

// NetDiskResponse

// required bool res = 1;
inline bool NetDiskResponse::_internal_has_res() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetDiskResponse::has_res() const {
  return _internal_has_res();
}
inline void NetDiskResponse::clear_res() {
  res_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool NetDiskResponse::_internal_res() const {
  return res_;
}
inline bool NetDiskResponse::res() const {
  // @@protoc_insertion_point(field_get:example.NetDiskResponse.res)
  return _internal_res();
}
inline void NetDiskResponse::_internal_set_res(bool value) {
  _has_bits_[0] |= 0x00000004u;
  res_ = value;
}
inline void NetDiskResponse::set_res(bool value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:example.NetDiskResponse.res)
}

// required uint32 shard = 2;
inline bool NetDiskResponse::_internal_has_shard() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetDiskResponse::has_shard() const {
  return _internal_has_shard();
}
inline void NetDiskResponse::clear_shard() {
  shard_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskResponse::_internal_shard() const {
  return shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskResponse::shard() const {
  // @@protoc_insertion_point(field_get:example.NetDiskResponse.shard)
  return _internal_shard();
}
inline void NetDiskResponse::_internal_set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  shard_ = value;
}
inline void NetDiskResponse::set_shard(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shard(value);
  // @@protoc_insertion_point(field_set:example.NetDiskResponse.shard)
}

// required uint32 part_index = 3;
inline bool NetDiskResponse::_internal_has_part_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetDiskResponse::has_part_index() const {
  return _internal_has_part_index();
}
inline void NetDiskResponse::clear_part_index() {
  part_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskResponse::_internal_part_index() const {
  return part_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetDiskResponse::part_index() const {
  // @@protoc_insertion_point(field_get:example.NetDiskResponse.part_index)
  return _internal_part_index();
}
inline void NetDiskResponse::_internal_set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  part_index_ = value;
}
inline void NetDiskResponse::set_part_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_part_index(value);
  // @@protoc_insertion_point(field_set:example.NetDiskResponse.part_index)
}

// required string file_name = 4;
inline bool NetDiskResponse::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetDiskResponse::has_file_name() const {
  return _internal_has_file_name();
}
inline void NetDiskResponse::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetDiskResponse::file_name() const {
  // @@protoc_insertion_point(field_get:example.NetDiskResponse.file_name)
  return _internal_file_name();
}
inline void NetDiskResponse::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:example.NetDiskResponse.file_name)
}
inline std::string* NetDiskResponse::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskResponse.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& NetDiskResponse::_internal_file_name() const {
  return file_name_.Get();
}
inline void NetDiskResponse::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskResponse::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskResponse.file_name)
}
inline void NetDiskResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskResponse.file_name)
}
inline void NetDiskResponse::set_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskResponse.file_name)
}
inline std::string* NetDiskResponse::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:example.NetDiskResponse.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskResponse.file_name)
}
inline std::string* NetDiskResponse::unsafe_arena_release_file_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskResponse.file_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskResponse::unsafe_arena_set_allocated_file_name(
    std::string* file_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskResponse.file_name)
}

// required string body = 6;
inline bool NetDiskResponse::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetDiskResponse::has_body() const {
  return _internal_has_body();
}
inline void NetDiskResponse::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetDiskResponse::body() const {
  // @@protoc_insertion_point(field_get:example.NetDiskResponse.body)
  return _internal_body();
}
inline void NetDiskResponse::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:example.NetDiskResponse.body)
}
inline std::string* NetDiskResponse::mutable_body() {
  // @@protoc_insertion_point(field_mutable:example.NetDiskResponse.body)
  return _internal_mutable_body();
}
inline const std::string& NetDiskResponse::_internal_body() const {
  return body_.Get();
}
inline void NetDiskResponse::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetDiskResponse::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.NetDiskResponse.body)
}
inline void NetDiskResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.NetDiskResponse.body)
}
inline void NetDiskResponse::set_body(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.NetDiskResponse.body)
}
inline std::string* NetDiskResponse::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetDiskResponse::release_body() {
  // @@protoc_insertion_point(field_release:example.NetDiskResponse.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetDiskResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.NetDiskResponse.body)
}
inline std::string* NetDiskResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.NetDiskResponse.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetDiskResponse::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.NetDiskResponse.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetDisk_2eproto
